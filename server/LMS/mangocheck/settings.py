"""
Django settings for mangocheck project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-o20!7gfs+y5p0dwgny%%qofcatm8r-u6!l2iiq$uapsx)g@4x9"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "*",
    'localhost',
    '192.168.0.179'
]


# Application definition


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app",
    "rest_framework",
    "rest_framework.authtoken",
  
    "mangocheck",
    "generative",
    "corsheaders",
    "rest_framework_simplejwt",
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
}


SITE_ID = 1

MIDDLEWARE = [
     'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Must be before CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'app.middleware.CustomAuthMiddleware',  # Your custom middleware
    
    
]
CORS_ALLOWED_ORIGINS = [
      "http://localhost:3000",
    "http://localhost:8080",
    "http://localhost:8081",
    "http://127.0.0.1:8080",
    "http://192.168.0.179:8080",
   
    
]

CORS_ALLOW_ALL_ORIGINS =  True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

ROOT_URLCONF = "mangocheck.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ['BASE_DIR / "templates"'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
               
            ],
        },
    },
]

WSGI_APPLICATION = "mangocheck.wsgi.application"

SOCIAL_ACCOUNT_PROVIDER={
    'google':{
        'SCOPE':[
            'profile',
            'email'
        ],
        
        'AUTH_PARAMS':{
            'access_type':'online',
        }
    },
    "github": {
        "APP": {
            "client_id":os.environ.get("SOCIAL_AUTH_GITHUB_KEY"),
            "secret":  os.environ.get("SOCIAL_AUTH_GITHUB_SECRET"),
            "key": "",
            "redirect_uri": "http://localhost:8000/dashbord",
        }
    }
        
}
# Database
DATABASES = {
    'default': {
        'ENGINE': '',
        
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

STATIC_URL = '/static/'






AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    'app.auth_backends.StudentAuthBackend',  
    'app.auth_backends.TeacherAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
  
]




# import os

# def load_env_file(file_path):
#     """Read .env file and load variables into environment"""
#     if os.path.exists(file_path):
#         with open(file_path) as f:
#             for line in f:
#                 key, value = line.strip().split("=", 1)
#                 os.environ[key] = value

# # Provide the absolute path to the .env file
# env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), ".env")
# load_env_file(env_path)


# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")

# SOCIAL_AUTH_FACEBOOK_KEY = os.environ.get("SOCIAL_AUTH_FACEBOOK_KEY")
# SOCIAL_AUTH_FACEBOOK_SECRET = os.environ.get("SOCIAL_AUTH_FACEBOOK_SECRET")

# SOCIAL_AUTH_GITHUB_KEY = os.environ.get("SOCIAL_AUTH_GITHUB_KEY")
# SOCIAL_AUTH_GITHUB_SECRET = os.environ.get("SOCIAL_AUTH_GITHUB_SECRET")






SOCIAL_AUTH_GITHUB_SCOPE = ['user:email']
# LOGIN_URL = 'dashboard'
# LOGIN_REDIRECT_URL = 'dashboard'


LOGOUT_URL='/'
ACCOUNT_LOGOUT_REDIRECT_URL='/'
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"  
LOGIN_REDIRECT_URL = "dashbord"  
LOGOUT_REDIRECT_URL = "/"

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'mangocheck.auth_pipelines.create_teacher', 
    'mangocheck.auth_pipelines.custom_function',
    'mangocheck.auth_pipelines.assign_user_type',
)

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_USE_JWT = True
ACCOUNT_EMAIL_VERIFICATION = "none"

SOCIALACCOUNT_PROVIDERS = {
    "github": {
        "APP": {
            "client_id": os.environ.get("SOCIAL_AUTH_GITHUB_KEY"),
            "secret":  os.environ.get("SOCIAL_AUTH_GITHUB_SECRET"),
            "key": "",
            "redirect_uri": "http://localhost:8000/dashbord",
        }
    }
}


SOCIAL_AUTH_REDIRECT_IS_HTTPS = False



